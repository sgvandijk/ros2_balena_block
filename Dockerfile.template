# Use multi-stage builder to build ROS 2 packages
FROM balenalib/%%BALENA_ARCH%%:bullseye-build AS builder

# Mostly follow ROS 2's instructions to build from source:
# https://docs.ros.org/en/humble/Installation/Alternatives/Ubuntu-Development-Setup.html

RUN install_packages \
    curl \
    locales

RUN locale-gen en_US en_US.UTF-8 \
    && dpkg-reconfigure locales

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu bullseye main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN install_packages \
      python3-flake8-docstrings \
      python3-pip \
      python3-pytest-cov \
      ros-dev-tools

RUN mkdir -p /tmp/ros/humble/src \
  && cd /tmp/ros/humble \
  && vcs import --input https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos src

# Ensure visualisation packages are skipped
RUN cd /tmp/ros/humble \
    && touch src/ros2/rviz/AMENT_IGNORE \
    && touch src/ros-visualization/AMENT_IGNORE \
    && touch src/ros2/system_tests/AMENT_IGNORE

ENV PACKAGES_UP_TO=""
# Uncomment the next two lines to limit which packages to build, rather than all of ROS 2
# ENV BUILD_PKGS="demo_nodes_cpp ros2launch ros2run ros2node ros2topic"
# ENV PACKAGES_UP_TO="--packages-up-to ${BUILD_PKGS}"

ENV ROS_OS_OVERRIDE=debian

# Install dependencies, using Colcon to make sure only dependencies for those packages that we will built (and their dependencies) are installed.
RUN apt update \
    && rosdep init \
    && rosdep update \
    && cd /tmp/ros/humble \
    && DEBIAN_FRONTEND=noninteractive rosdep install --os=debian:bullseye \
      --from-paths $(colcon list ${PACKAGES_UP_TO} --paths-only) \
      --ignore-src -y -r --skip-keys "fastcdr rti-connext-dds-6.0.1 urdfdom_headers" \
  && rm -rf /var/lib/apt/lists/*

# Build ROS 2
# -latomic cannot be added to CMAKE_EXE_LINKER_FLAGS and/or CMAKE_SHARED_LINKER_FLAGS, because those don't add it to the end of the link command, which is what GCC requires.
RUN cd /tmp/ros/humble \
    && colcon build \
    --continue-on-error \
    --merge-install \
    ${PACKAGES_UP_TO} \
    --cmake-args ' -DCMAKE_CXX_STANDARD_LIBRARIES=-latomic' ' -DBUILD_TESTING=OFF' ' -DCMAKE_BUILD_TYPE=Release' \
    --install-base /opt/ros/humble

# Construct actual image
FROM balenalib/%%BALENA_ARCH%%:bullseye-run

# Copy ROS from the builder image above
COPY --from=builder /opt/ros/humble /opt/ros/humble

RUN install_packages \
    curl \
    locales

RUN locale-gen en_US en_US.UTF-8 \
    && dpkg-reconfigure locales

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu bullseye main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

ENV ROS_OS_OVERRIDE=debian

# Install required dependencies, skipping any dev packages
RUN install_packages \
    python3-rosdep2

RUN rosdep update

# Still need to update apt for rosdep
# TODO: this also still installs some build requirements, would be nice to skip those
RUN apt update \
    && rosdep install \
    --from-paths /opt/ros/humble/share \
    --os=debian:bullseye \
    --skip-keys "fastcdr rti-connext-dds-6.0.1 urdfdom_headers" \
    --ignore-src -y -r \
  && rm -rf /var/lib/apt/lists/*

CMD sh -c ". /opt/ros/humble/setup.sh && ros2 launch demo_nodes_cpp talker_listener.launch.py || while true; do sleep 1; done"
